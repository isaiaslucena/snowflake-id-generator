"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnowflakeIdGenerator = void 0;
const os_1 = require("os");
function getMachineIdByIp(machineIdBits) {
    const ip = Object.values(os_1.networkInterfaces())
        .flat()
        .find((networkInterfaceInfo) => networkInterfaceInfo.family === "IPv4" &&
        networkInterfaceInfo.internal === false)?.address;
    if (!ip) {
        return null;
    }
    const fragments = ip
        .split(".")
        .map((fragment) => Number(fragment).toString(2))
        .join("");
    return BigInt(parseInt(fragments.slice(-Number(machineIdBits)), 2));
}
function getMachineIdByRandom(machineIdBits) {
    return BigInt(Math.floor(Math.random() * 2 ** Number(machineIdBits)));
}
class SnowflakeIdGenerator {
    constructor(options) {
        this.sequence = 0n;
        this.timestampBits = BigInt(options?.timestampBits || 41n);
        this.machineIdBits = BigInt(options?.machineIdBits || 10n);
        this.sequenceBits = 64n - this.timestampBits - this.machineIdBits;
        this.timestampShift = this.sequenceBits + this.machineIdBits;
        this.machineIdShift = this.sequenceBits;
        this.sequenceMask = 2n ** this.sequenceBits;
        this.epoch = BigInt(options?.epoch || new Date("2020-01-01").getTime());
        this.machineId = BigInt(options?.machineId ||
            getMachineIdByIp(this.machineIdBits) ||
            getMachineIdByRandom(this.machineIdBits));
    }
    next() {
        const diff = BigInt(Date.now()) - this.epoch;
        let id = diff << this.timestampShift;
        id |= this.machineId << this.machineIdShift;
        id |= this.sequence = ++this.sequence % this.sequenceMask;
        return id;
    }
    static set(options) {
        this.instance = new this(options);
    }
    static next() {
        this.instance = this.instance || new this();
        return this.instance.next();
    }
}
exports.SnowflakeIdGenerator = SnowflakeIdGenerator;
//# sourceMappingURL=index.js.map